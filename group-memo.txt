■グループメモ


理由：関数名が「getAllRecipeData」となっているので、レシピデータを"すべて"取得する機能だとすぐに理解できました。
理由：レシピIDの変数名が「id」となっているので、ここにレシピIDが入るとすぐに理解できました。

function getAllRecipeData(){
	var allRecipe="";
	for(var id=0;id<recipeData.length;id++){
	    allRecipe += recipeData[id]["ID"] + ":" + recipeData[id]["RecipeName"] + "  " + recipeData[id]["RecipeMethod"] + "\n";
	}
	return allRecipe;
}

見つけたきっかけ：getAllという文字列まで読んで、これがレシピデータをすべて表示する箇所と理解できたため





理由：配列のサイズを#define定義することで、配列のサイズ変更が簡単に実現できるようになっていた
理由：命名がLINE_BUFFERとなっていて、変数名から利用している内容がすぐに判断できた
理由：エラーメッセージの中にファイル名を設けることで、デバッグしやすいコードであった

	#define LINE_BUFFER 1024

	int
	main(int argc, char *argv[]) {
		FILE *file;
 -		char line[1024];
 +		char line[LINE_BUFFER];
		char *file_name = argv[1];

		file = fopen(file_name, "r");
		if (file == NULL) {
			fprintf(stderr, "ファイルをオープンできません: <%s>\n", file_name);
			return 1;
		}

 -		if (fgets(line, 1024, file) == NULL) {
 +		if (fgets(line, LINE_BUFFER, file) == NULL) {
			fprintf(stderr, "ファイルの読み込みに失敗しました: <%s>\n", file_name);
			return 1;
		}

		printf("%s\n", line);

		return 0;
	}




理由：readmeに自分とは違う環境の人に配慮したコメントの記述であった

引数にデータファイルを指定して、Rubyインタープリターでrecipe.rbを実行してください。

以下はコマンドライン（bashやコマンドプロンプトなど）で実行する例です。

$ ruby recipe.rb recipe-data.txt
UnixやLinuxなどの環境では、以下のように実行することもできます。

$ ./recipe.rb recipe-data.txt
もし環境変数のPATHが通っていない場合、絶対パスで指定してください。

$ /path/to/ruby recipe.rb recipe-data.txt




理由：変数名をみて処理内容がわかりやすいかった
理由：puts オムライス　→　puts "" とコードの記述が分かりやすかった

data_path = ARGV[0]

puts File.read(data_path)




理由：レシピデータを格納する配列や、特定のレシピを表す変数がそれぞれ複数形、単数形で表されていてわかりやすかった
recipes.each do |recipe|
  puts recipe
end



理由：ファイルを読み込むメソッド名をread_linesとしていて今後の拡張性もよくわかりやすかった
def read_lines(data_path)
  recipes = []
  File.open(data_path, "r") do |file|
    file.each_line do |line|
      recipes << line
    end
  end
  recipes
end





理由：操作方法がボタンを押して確認できる仕組みだったので、テストしやすかった
理由：<input>タグ内で適当な改行があり見やすかった
理由：関数名がDisplayRecipeDataとなっていて、関数名を見て判断しやすかった
    <input id="Button1" type="button" value="動作を確認する" 
	onclick="DisplayRecipeData(recipeArray)" />




理由：メモの注釈にChromeで動作確認済みとあり、どこまでテストしているかわかりやすかった
実行方法：
Page_ReadableCode.htmlをブラウザで開きます。
動作を確認するボタンをクリックします。

レシピデータについて：
HTMLページ内に直接レシピデータを記載します。













